"""add enefle

Revision ID: a2041a0a58c0
Revises: b3f16d9ee227
Create Date: 2025-06-10 10:50:08.762132

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a2041a0a58c0'
down_revision = 'b3f16d9ee227'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('enefle_records',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('card_number', sa.String(length=20), nullable=True, comment='カード番号（カード車番）'),
    sa.Column('transaction_date', sa.Date(), nullable=False, comment='日付'),
    sa.Column('station_name', sa.String(length=100), nullable=True, comment='給油所名'),
    sa.Column('product_name', sa.String(length=100), nullable=True, comment='商品名'),
    sa.Column('quantity', sa.Numeric(precision=10, scale=3), nullable=True, comment='数量（リットル）'),
    sa.Column('unit_price', sa.Numeric(precision=10, scale=2), nullable=True, comment='単価（円/リットル）'),
    sa.Column('total_amount', sa.Numeric(precision=10, scale=0), nullable=True, comment='金額（円）'),
    sa.Column('slip_number', sa.String(length=20), nullable=True, comment='伝票番号'),
    sa.Column('input_vehicle_number', sa.String(length=20), nullable=True, comment='入力車番'),
    sa.Column('fuel_time', sa.Time(), nullable=True, comment='給油時間（HH:MM形式）'),
    sa.Column('tax_excluded_unit_price', sa.Numeric(precision=10, scale=2), nullable=True, comment='税抜き単価'),
    sa.Column('tax_excluded_amount', sa.Numeric(precision=10, scale=0), nullable=True, comment='税抜き金額'),
    sa.Column('diesel_tax', sa.Numeric(precision=10, scale=0), nullable=True, comment='軽油引取税'),
    sa.Column('consumption_tax', sa.Numeric(precision=10, scale=0), nullable=True, comment='消費税'),
    sa.Column('consumption_tax_rate', sa.Integer(), nullable=True, comment='消費税率（%）'),
    sa.Column('customer_code', sa.String(length=20), nullable=True, comment='お客様コード'),
    sa.Column('station_code', sa.String(length=10), nullable=True, comment='給油所コード'),
    sa.Column('product_code', sa.String(length=10), nullable=True, comment='商品コード'),
    sa.Column('branch_code', sa.String(length=10), nullable=True, comment='支店コード'),\
    sa.Column('slip_branch_number', sa.String(length=10), nullable=True, comment='伝票番号枝番'),
    sa.Column('receipt_ss_code', sa.String(length=20), nullable=True, comment='レシートＳＳコード'),
    sa.Column('import_date', sa.DateTime(), nullable=True, comment='インポート日時'),
    sa.Column('created_at', sa.DateTime(), nullable=True, comment='作成日時'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='更新日時'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('enefle_records', schema=None) as batch_op:
        batch_op.create_index('idx_enefle_card_date', ['card_number', 'transaction_date'], unique=False)
        batch_op.create_index('idx_enefle_date_vehicle', ['transaction_date', 'input_vehicle_number'], unique=False)

#    op.drop_table('vehicle_cards')
 #   op.drop_table('fuel_stations')
 #   op.drop_table('service_types')
  #  op.drop_table('import_batches')
   # op.drop_table('import_errors')
    #op.drop_table('service_records')
    #with op.batch_alter_table('courses', schema=None) as batch_op:
     #   batch_op.alter_column('fld_コースID',
      #         existing_type=sa.SMALLINT(),
       #        server_default=None,
        #       existing_nullable=False,
         #      autoincrement=True)

#    with op.batch_alter_table('vehicles', schema=None) as batch_op:
 #       batch_op.alter_column('初年度登録年月',
  #             existing_type=sa.TEXT(),
   #            type_=sa.String(),
    #           existing_nullable=True)
     #   batch_op.drop_column('呼称')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('vehicles', schema=None) as batch_op:
        batch_op.add_column(sa.Column('呼称', sa.VARCHAR(length=10), autoincrement=False, nullable=True, comment='車両呼称（ナンバー下4桁）'))
        batch_op.alter_column('初年度登録年月',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)

    with op.batch_alter_table('courses', schema=None) as batch_op:
        batch_op.alter_column('fld_コースID',
               existing_type=sa.SMALLINT(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=32767, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)

    op.create_table('service_records',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('vehicle_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='車両ID'),
    sa.Column('vehicle_card_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='車両カードID'),
    sa.Column('fuel_station_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='スタンドID'),
    sa.Column('service_type_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='サービス種別ID'),
    sa.Column('service_date', sa.DATE(), autoincrement=False, nullable=False, comment='利用日'),
    sa.Column('service_time', postgresql.TIME(), autoincrement=False, nullable=True, comment='利用時刻'),
    sa.Column('product_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='商品コード'),
    sa.Column('product_name', sa.VARCHAR(length=200), autoincrement=False, nullable=True, comment='商品名'),
    sa.Column('quantity', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=True, comment='数量'),
    sa.Column('unit_price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True, comment='単価'),
    sa.Column('unit_price_before_tax', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True, comment='税抜単価'),
    sa.Column('amount_before_tax', sa.NUMERIC(precision=10, scale=0), autoincrement=False, nullable=True, comment='税抜金額'),
    sa.Column('tax_amount', sa.NUMERIC(precision=10, scale=0), autoincrement=False, nullable=True, comment='消費税額'),
    sa.Column('total_amount', sa.NUMERIC(precision=10, scale=0), autoincrement=False, nullable=False, comment='合計金額'),
    sa.Column('odometer_reading', sa.INTEGER(), autoincrement=False, nullable=True, comment='オドメーター読み値（km）'),
    sa.Column('trip_distance', sa.INTEGER(), autoincrement=False, nullable=True, comment='前回給油からの距離（km）'),
    sa.Column('fuel_efficiency', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True, comment='燃費（km/L）'),
    sa.Column('card_number_masked', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='カード番号（マスク済み）'),
    sa.Column('transaction_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='取引ID'),
    sa.Column('receipt_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='レシート番号'),
    sa.Column('import_file_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='取り込み元ファイル名'),
    sa.Column('import_batch_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='取り込みバッチID'),
    sa.Column('csv_format_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='CSVフォーマット種別'),
    sa.Column('csv_row_number', sa.INTEGER(), autoincrement=False, nullable=True, comment='CSVの行番号'),
    sa.Column('raw_data', sa.TEXT(), autoincrement=False, nullable=True, comment='生データ（JSON形式）'),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True, comment='備考'),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='作成日時'),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='更新日時'),
    sa.ForeignKeyConstraint(['fuel_station_id'], ['fuel_stations.id'], name='service_records_fuel_station_id_fkey'),
    sa.ForeignKeyConstraint(['service_type_id'], ['service_types.id'], name='service_records_service_type_id_fkey'),
    sa.ForeignKeyConstraint(['vehicle_card_id'], ['vehicle_cards.id'], name='service_records_vehicle_card_id_fkey'),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.id'], name='service_records_vehicle_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='service_records_pkey')
    )
    op.create_table('import_errors',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('batch_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='バッチID'),
    sa.Column('csv_row_number', sa.INTEGER(), autoincrement=False, nullable=False, comment='CSVの行番号'),
    sa.Column('error_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='エラー種別'),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True, comment='エラーメッセージ'),
    sa.Column('raw_csv_data', sa.TEXT(), autoincrement=False, nullable=True, comment='エラーが発生した生CSVデータ'),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='作成日時'),
    sa.ForeignKeyConstraint(['batch_id'], ['import_batches.batch_id'], name='import_errors_batch_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='import_errors_pkey')
    )
    op.create_table('import_batches',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('batch_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='バッチID'),
    sa.Column('file_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='ファイル名'),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True, comment='ファイルサイズ（バイト）'),
    sa.Column('csv_format_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='CSVフォーマット種別'),
    sa.Column('company_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='ガソリンスタンド会社名'),
    sa.Column('total_rows', sa.INTEGER(), autoincrement=False, nullable=True, comment='総行数'),
    sa.Column('success_rows', sa.INTEGER(), autoincrement=False, nullable=True, comment='成功行数'),
    sa.Column('error_rows', sa.INTEGER(), autoincrement=False, nullable=True, comment='エラー行数'),
    sa.Column('duplicate_rows', sa.INTEGER(), autoincrement=False, nullable=True, comment='重複行数'),
    sa.Column('skipped_rows', sa.INTEGER(), autoincrement=False, nullable=True, comment='スキップ行数'),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='状態'),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True, comment='エラーメッセージ'),
    sa.Column('import_started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='取り込み開始日時'),
    sa.Column('import_completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='取り込み完了日時'),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='実行者'),
    sa.PrimaryKeyConstraint('id', name='import_batches_pkey'),
    sa.UniqueConstraint('batch_id', name='import_batches_batch_id_key')
    )
    op.create_table('service_types',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('service_code', sa.VARCHAR(length=20), autoincrement=False, nullable=False, comment='サービスコード'),
    sa.Column('service_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='サービス名'),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='カテゴリ'),
    sa.Column('unit', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='単位'),
    sa.Column('is_fuel', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='燃料フラグ'),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='有効フラグ'),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='作成日時'),
    sa.PrimaryKeyConstraint('id', name='service_types_pkey'),
    sa.UniqueConstraint('service_code', name='service_types_service_code_key')
    )
    op.create_table('fuel_stations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('station_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='スタンドコード'),
    sa.Column('station_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False, comment='スタンド名'),
    sa.Column('company_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='運営会社名'),
    sa.Column('company_code', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='会社コード'),
    sa.Column('address', sa.VARCHAR(length=500), autoincrement=False, nullable=True, comment='住所'),
    sa.Column('prefecture', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='都道府県'),
    sa.Column('city', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='市区町村'),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='電話番号'),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='有効フラグ'),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='作成日時'),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='更新日時'),
    sa.PrimaryKeyConstraint('id', name='fuel_stations_pkey'),
    sa.UniqueConstraint('station_code', name='fuel_stations_station_code_key')
    )
    op.create_table('vehicle_cards',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('vehicle_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='車両ID'),
    sa.Column('card_number', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='カード番号'),
    sa.Column('card_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='カード種別'),
    sa.Column('company_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='カード会社名'),
    sa.Column('issue_date', sa.DATE(), autoincrement=False, nullable=True, comment='発行日'),
    sa.Column('expiry_date', sa.DATE(), autoincrement=False, nullable=True, comment='有効期限'),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='有効フラグ'),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True, comment='備考'),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='作成日時'),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.id'], name='vehicle_cards_vehicle_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='vehicle_cards_pkey')
    )
    with op.batch_alter_table('enefle_records', schema=None) as batch_op:
        batch_op.drop_index('idx_enefle_date_vehicle')
        batch_op.drop_index('idx_enefle_card_date')

    op.drop_table('enefle_records')
    # ### end Alembic commands ###
